package com.azure.demo;

import java.time.*;
import java.time.format.DateTimeFormatter;

public class DeferredTimeCalculator {

    // Static final cutoff times directly from strings
    private static final LocalTime MORNING_CUTOFF = parseCutoffTime(System.getenv("A"));//"06:30"
    private static final LocalTime EVENING_CUTOFF = parseCutoffTime(System.getenv("B"));//"21:45"

    /**
     * Parses a cutoff time string in "HH:mm" format into LocalTime.
     */
    private static LocalTime parseCutoffTime(String timeStr) {
        if (timeStr == null || !timeStr.matches("\\d{1,2}:\\d{2}")) {
            throw new IllegalArgumentException("Invalid cutoff time format: " + timeStr);
        }
        String[] parts = timeStr.split(":");
        int hour = Integer.parseInt(parts[0]);
        int minute = Integer.parseInt(parts[1]);
        return LocalTime.of(hour, minute);
    }

    /**
     * Calculates the deferred time based on arrival time.
     */
    public static LocalDateTime calculateDeferredTime(ZonedDateTime arrivalTimeUTC) {
        LocalTime arrivalTimeOnly = arrivalTimeUTC.toLocalTime();

        // Case 1: Between MORNING_CUTOFF and EVENING_CUTOFF
        if (!arrivalTimeOnly.isBefore(MORNING_CUTOFF) && !arrivalTimeOnly.isAfter(EVENING_CUTOFF)) {
            return arrivalTimeUTC.plusMinutes(30).toLocalDateTime();
        }
        // Case 2: After EVENING_CUTOFF -> Next day MORNING_CUTOFF
        else if (arrivalTimeOnly.isAfter(EVENING_CUTOFF)) {
            return arrivalTimeUTC.plusDays(1)
                    .withHour(MORNING_CUTOFF.getHour())
                    .withMinute(MORNING_CUTOFF.getMinute())
                    .withSecond(0)
                    .withNano(0).toLocalDateTime();
        }
        // Case 3: Before MORNING_CUTOFF -> Same day MORNING_CUTOFF
        else {
            return arrivalTimeUTC
                    .withHour(MORNING_CUTOFF.getHour())
                    .withMinute(MORNING_CUTOFF.getMinute())
                    .withSecond(0)
                    .withNano(0).toLocalDateTime();
        }
    }

    public static void main(String[] args) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("uuuu-MM-dd HH:mm:ss z");

        ZonedDateTime arrival1 = ZonedDateTime.of(2025, 7, 11, 6, 15, 0, 0, ZoneOffset.UTC);
        ZonedDateTime arrival2 = ZonedDateTime.of(2025, 7, 11, 21, 44, 0, 0, ZoneOffset.UTC);
        ZonedDateTime arrival3 = ZonedDateTime.of(2025, 7, 11, 3, 0, 0, 0, ZoneOffset.UTC);
        ZonedDateTime now=ZonedDateTime.now(ZoneOffset.UTC);
        ZonedDateTime plusFourHours = now.plusHours(6);
        System.out.println(plusFourHours);
        System.out.println(calculateDeferredTime(plusFourHours));

    }
}
