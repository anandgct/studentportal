package com.azure.demo;

import java.time.*;
import java.time.format.DateTimeFormatter;

public class DeferredTimeCalculator {

    // Static final cutoff times (can load from env or hardcoded for now)
    private static final LocalTime MORNING_CUTOFF = parseCutoffTime(System.getenv().getOrDefault("A", "06:00")); // "06:00"
    private static final LocalTime EVENING_CUTOFF = parseCutoffTime(System.getenv().getOrDefault("B", "21:45")); // "21:45"

    /**
     * Parses a cutoff time string in "HH:mm" format into LocalTime.
     */
    private static LocalTime parseCutoffTime(String timeStr) {
        if (timeStr == null || !timeStr.matches("\\d{1,2}:\\d{2}")) {
            throw new IllegalArgumentException("Invalid cutoff time format: " + timeStr);
        }
        String[] parts = timeStr.split(":");
        int hour = Integer.parseInt(parts[0]);
        int minute = Integer.parseInt(parts[1]);
        return LocalTime.of(hour, minute);
    }

    /**
     * Calculates the deferred time based on arrival time.
     */
    public static LocalDateTime calculateDeferredTime(ZonedDateTime arrivalTimeUTC) {
        LocalTime arrivalTimeOnly = arrivalTimeUTC.toLocalTime();

        // Case 1: Between 06:00 and 21:44 ➝ Add 30 minutes
        if (!arrivalTimeOnly.isBefore(MORNING_CUTOFF) && arrivalTimeOnly.isBefore(EVENING_CUTOFF)) {
            return arrivalTimeUTC.plusMinutes(30).toLocalDateTime();
        }

        // Case 2: Between 00:00 and 05:59 ➝ Defer to same day 06:30
        if (arrivalTimeOnly.isBefore(MORNING_CUTOFF)) {
            return arrivalTimeUTC
                    .withHour(6).withMinute(30)
                    .withSecond(0).withNano(0)
                    .toLocalDateTime();
        }

        // Case 3: Between 21:45 and 23:59 ➝ Defer to next day 06:30
        return arrivalTimeUTC.plusDays(1)
                .withHour(6).withMinute(30)
                .withSecond(0).withNano(0)
                .toLocalDateTime();
    }

    public static void main(String[] args) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("uuuu-MM-dd HH:mm:ss");

        ZonedDateTime test1 = ZonedDateTime.of(2025, 7, 11, 5, 59, 0, 0, ZoneOffset.UTC); // Before 06:00
        ZonedDateTime test2 = ZonedDateTime.of(2025, 7, 11, 6, 0, 0, 0, ZoneOffset.UTC);  // Exactly 06:00
        ZonedDateTime test3 = ZonedDateTime.of(2025, 7, 11, 10, 15, 0, 0, ZoneOffset.UTC); // During daytime
        ZonedDateTime test4 = ZonedDateTime.of(2025, 7, 11, 21, 44, 0, 0, ZoneOffset.UTC); // Just before EVENING_CUTOFF
        ZonedDateTime test5 = ZonedDateTime.of(2025, 7, 11, 21, 45, 0, 0, ZoneOffset.UTC); // At EVENING_CUTOFF
        ZonedDateTime test6 = ZonedDateTime.of(2025, 7, 11, 23, 30, 0, 0, ZoneOffset.UTC); // Late night

        System.out.println("Arrival: " + test1.format(formatter) + " ➝ Deferred: " + calculateDeferredTime(test1));
        System.out.println("Arrival: " + test2.format(formatter) + " ➝ Deferred: " + calculateDeferredTime(test2));
        System.out.println("Arrival: " + test3.format(formatter) + " ➝ Deferred: " + calculateDeferredTime(test3));
        System.out.println("Arrival: " + test4.format(formatter) + " ➝ Deferred: " + calculateDeferredTime(test4));
        System.out.println("Arrival: " + test5.format(formatter) + " ➝ Deferred: " + calculateDeferredTime(test5));
        System.out.println("Arrival: " + test6.format(formatter) + " ➝ Deferred: " + calculateDeferredTime(test6));
    }
}
