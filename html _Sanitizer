import com.microsoft.applicationinsights.TelemetryClient;
import com.microsoft.applicationinsights.attach.ApplicationInsights;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SpringBootApplication
public class YourApplication {
    private static final Logger logger = LoggerFactory.getLogger(YourApplication.class);

    @Value("${APPLICATIONINSIGHTS_CONNECTION_STRING:}")
    private String connectionString;

    public static void main(String[] args) {
        // Log connection string for verification
        logger.info("Application Insights Connection String: {}", connectionString);
        if (connectionString == null || connectionString.isEmpty()) {
            logger.error("Connection string is null or empty, skipping Application Insights initialization");
        } else {
            // Initialize Application Insights
            ApplicationInsights.attach(connectionString);

            // Create TelemetryClient
            TelemetryClient telemetryClient = new TelemetryClient();
            telemetryClient.getContext().setConnectionString(connectionString);

            // Post telemetry data
            try {
                // Trace (similar to a log)
                telemetryClient.trackTrace("Main class trace message");

                // Event
                telemetryClient.trackEvent("MainClassStarted", null, null);

                // Metric
                telemetryClient.trackMetric("MainClassMetric", 42.0);

                // Exception
                try {
                    throw new RuntimeException("Test exception from main class");
                } catch (Exception e) {
                    telemetryClient.trackException(e);
                }

                // Flush to ensure telemetry is sent
                telemetryClient.flush();

                logger.info("Telemetry data sent to Application Insights");
            } catch (Exception e) {
                logger.error("Failed to send telemetry", e);
            }
        }

        // Start Spring Boot application
        SpringApplication.run(YourApplication.class, args);
    }
}import com.microsoft.applicationinsights.TelemetryClient;
import com.microsoft.applicationinsights.attach.ApplicationInsights;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SpringBootApplication
public class YourApplication {
    private static final Logger logger = LoggerFactory.getLogger(YourApplication.class);

    @Value("${APPLICATIONINSIGHTS_CONNECTION_STRING:}")
    private String connectionString;

    public static void main(String[] args) {
        // Log connection string for verification
        logger.info("Application Insights Connection String: {}", connectionString);
        if (connectionString == null || connectionString.isEmpty()) {
            logger.error("Connection string is null or empty, skipping Application Insights initialization");
        } else {
            // Initialize Application Insights
            ApplicationInsights.attach(connectionString);

            // Create TelemetryClient
            TelemetryClient telemetryClient = new TelemetryClient();
            telemetryClient.getContext().setConnectionString(connectionString);

            // Post telemetry data
            try {
                // Trace (similar to a log)
                telemetryClient.trackTrace("Main class trace message");

                // Event
                telemetryClient.trackEvent("MainClassStarted", null, null);

                // Metric
                telemetryClient.trackMetric("MainClassMetric", 42.0);

                // Exception
                try {
                    throw new RuntimeException("Test exception from main class");
                } catch (Exception e) {
                    telemetryClient.trackException(e);
                }

                // Flush to ensure telemetry is sent
                telemetryClient.flush();

                logger.info("Telemetry data sent to Application Insights");
            } catch (Exception e) {
                logger.error("Failed to send telemetry", e);
            }
        }

        // Start Spring Boot application
        SpringApplication.run(YourApplication.class, args);
    }
}
